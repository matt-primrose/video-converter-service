# Example configuration for video converter service
# Copy this file to config.yaml and customize for your deployment
#
# For local development:
# 1. Copy this file: cp config.yaml.example config.yaml
# 2. Update FFmpeg paths to point to local binaries (e.g., "./bin/ffmpeg.exe" on Windows)
# 3. Set appropriate storage type and paths
# 4. Replace placeholder tokens/secrets with actual values
#
# For production deployment:
# 1. Set sensitive values via environment variables (Azure EventGrid, webhook URLs, storage credentials)
# 2. Configure appropriate storage backend (Azure Blob, S3, etc.)
# 3. Adjust processing limits based on your infrastructure
# 4. Set log_level to "info" or "warn" for production

server:
  port: 8080
  host: "0.0.0.0"
  health_check_port: 8081

event_sources:
  azure_eventgrid:
    endpoint: ""  # Set via environment variable in production: AZURE_EVENTGRID_ENDPOINT
    key: ""       # Set via environment variable in production: AZURE_EVENTGRID_KEY
  websocket:
    endpoint: "ws://localhost:8080/events"
    token: "your-websocket-token-here"  # Replace with your actual token in production

storage:
  type: "local"  # Options: "local", "azure_blob", "s3"
  local:
    path: "./video_outputs"                 # Final destination for local storage type
  azure_blob:
    account: "your-storage-account"  # Replace with your Azure storage account name
    container: "video-outputs"
  s3:
    bucket: "your-s3-bucket"  # Replace with your S3 bucket name
    region: "us-east-1"

processing:
  max_concurrent_jobs: 2
  job_timeout_minutes: 60  # Increased for longer video processing - adjust based on your needs
  temp_dir: "./video_temp"
  outputs_dir: "./video_outputs"           # Local filesystem staging area (used by all storage types)
  max_temp_disk_gb: 5

ffmpeg:
  binary_path: "ffmpeg"      # Path to FFmpeg binary (use "./bin/ffmpeg.exe" for Windows local dev)
  probe_path: "ffprobe"      # Path to FFprobe binary (use "./bin/ffprobe.exe" for Windows local dev)
  default_preset: "fast"     # FFmpeg preset: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow
  hardware_accel: ""         # Hardware acceleration: "", "nvenc", "qsv", "vaapi" (leave empty for software encoding)

observability:
  log_level: "info"          # Log level: debug, info, warn, error (use "debug" for development)
  metrics_port: 9090
  enable_tracing: false
  jaeger_endpoint: ""        # Set to your Jaeger endpoint if tracing is enabled

# Job Templates - Define conversion profiles
# The "default" template creates:
# - HLS adaptive bitrate streaming with 5 quality levels (240p to 4k)
# - Progressive MP4 fallback files (720p and 1080p)
# You can customize profiles, bitrates, and output formats as needed
job_templates:
  default:
    outputs:
      - name: "hls-adaptive"
        package: "hls"
        profiles:
          - name: "240p"
            width: 426
            height: 240
            video_bitrate_kbps: 350
            audio_bitrate_kbps: 64
          - name: "360p" 
            width: 640
            height: 360
            video_bitrate_kbps: 700
            audio_bitrate_kbps: 96
          - name: "720p"
            width: 1280
            height: 720
            video_bitrate_kbps: 2500
            audio_bitrate_kbps: 128
          - name: "1080p"
            width: 1920
            height: 1080
            video_bitrate_kbps: 4000
            audio_bitrate_kbps: 128
          - name: "4k"
            width: 3840
            height: 2160
            video_bitrate_kbps: 8000
            audio_bitrate_kbps: 128
        segment_length_s: 6
        container: "fmp4"
        destination: "vod/{videoId}/hls/"

      - name: "progressive-fallback"
        package: "progressive"
        profile: "720p"
        destination: "vod/{videoId}/progressive/720p.mp4"

      - name: "progressive-hd"
        package: "progressive"
        profile: "1080p" 
        destination: "vod/{videoId}/progressive/1080p.mp4"

    ffmpeg:
      preset: "fast"
      hwaccel: ""              # Leave empty for software encoding, or use "nvenc", "qsv", "vaapi" for hardware
      extra_args: []           # Additional FFmpeg arguments (movflags +faststart is handled automatically)

    notifications:
      webhook_url: "https://your-webhook-endpoint.com/video-complete"  # Replace with your webhook URL
      on_complete: true
      on_failure: true